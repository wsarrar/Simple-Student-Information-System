// Academic Project 2020
// Name: Wasfi Sarrar
// Programming environment used: VS

// You are given a program that creates a list of students.
// Each student has the corresponding information: name, roll number and student type.
// This information is stored as an object of Student class.
// The classes Undergrad and Grad are child classes of the Stduent class.
// When adding a new student, these child classes are used to make the student node of the list.

// READ BEFORE YOU START:
// Please read the instructions above each required function and follow the directions carefully.
// In HW7, we will only test functionality of new functions. Some functions of HW6 like searchStudent, sort, changeRollNo 
// will not work as expected because of the modifications. HW6 functions will not be tested. They should work to support HW7 functions.

#include <iostream>
#include <fstream>
#include <string>
#include "Container.h"
#include "student.h"
#include "grad.h"
#include "undergrad.h"

using namespace std;

// forward declarations of functions already implemented:
void executeAction(char c);
Student* searchStudent(string name_input);
void addStudent(string name_input, int rollNo_input, int credits_input, studentType type);
void displayList();
void removeStudent(string name_input);
void deleteList();
//void sort(Container **head);		// implementation removed. Not needed.		
void save(string fileName);
void load(string fileName);

// forward declarations of functions that need implementation:
int isValidInput(int rollNo, int credits);
int totalCredits(string name);
void moreThan80Credits();

Container* list = NULL;				// global list

int main()
{
	char c = 'i';				// initialized to a dummy value

	// During first execution, there will be no list.txt in source directory. list.txt is generated by save() while exiting the program.
	load("list.txt");			
	
	do {
		cout << "\nCSE220 Project 7\n";
		cout << "Choose an action:\n";
		cout << "\t a: add a new student\n";
		cout << "\t d: display list of students\n";
		cout << "\t c: change roll number of a student\n";	// won't work since searchStudent() is modified. That is ok.
		cout << "\t r: remove a student\n";
		cout << "\t t: total credits of a student\n";
		cout << "\t g: students with more than 80 credits\n";
		//cout << "\t s: sort the list\n";	// sort option removed
// project7 Add menu options t & g for new options (see expected output)


		cout << "\t q: quit\n";
		cin >> c;
		cin.ignore();
		executeAction(c);
	} while (c != 'q');

	save("list.txt");			// save the linked list to a file

	deleteList();				// delete the list before exiting the program

	return 0;
}

// Ask for details from user for the given selection and perform that action
// Read the function case by case
void executeAction(char c)
{
	string name_input;
	int rollNo_input = -1;		// dummy init
	int credits_input = -1;
	int type_input = 2;
	studentType type;
	Student* studentFound = NULL;

	switch (c)
	{
	case 'a':	// add student
				// input student details from user
		cout << endl << "Enter student's name: ";
		getline(cin, name_input);

		while (isValidInput(rollNo_input, credits_input) == 0)	// check if input is valid
		{
			cout << "Enter roll number: ";
			cin >> rollNo_input;
			cin.ignore();

			cout << "Enter credits: ";
			cin >> credits_input;
			cin.ignore();
		}
		while (!(type_input == 0 || type_input == 1))
		{
			cout << endl << "Enter student type: " << endl;
			cout << "0. Undergrad " << endl;
			cout << "1. Grad" << endl;
			cin >> type_input;
			cin.ignore();
		}

		type = (studentType)type_input;

		// searchStudent() will return the student node if found, else returns NULL
		studentFound = searchStudent(name_input);
		if (studentFound == NULL)
		{
			addStudent(name_input, rollNo_input, credits_input, type);
			cout << endl << "Student added to list!" << endl << endl;
		}
		else
			cout << endl << "Student already present in the list!" << endl << endl;

		break;

	case 'd':		// display the list
		displayList();
		break;

	case 'r':		// remove a student
		cout << endl << "Enter student's name: ";
		getline(cin, name_input);
		studentFound = searchStudent(name_input);
		if (studentFound != NULL)
		{
			removeStudent(name_input);
			cout << endl << "Student removed!" << endl << endl;
		}
		else
			cout << endl << "Student not present in the list!" << endl << endl;
		break;

	case 'c':		// change roll number
		cout << endl << "Enter student's name: ";
		getline(cin, name_input);
		// searchStudent() will return the student node if found, else returns NULL
		studentFound = searchStudent(name_input);
		if (studentFound == NULL)
		{
			cout << endl << "Student not in list!" << endl << endl;
		}
		else
		{
			// if stduent exists in the list, then ask user for new roll number
			cout << endl << "Enter new roll number: ";
			cin >> rollNo_input;
			cin.ignore();

			changeRollNo(studentFound, rollNo_input);

			cout << endl << "Roll number changed!" << endl << endl;
		}
		break;
		// project7 Q2.3 make a case 't' to call totalCredits() here
	case 't':		// total credits of a student
			
				cout << endl << "Enter the Student's name:";
				getline(cin, name_input);
				cout << endl << "Total credits: " << totalCredits(name_input) << endl;
		
// project7 Q4.3 make a case 'g' to call moreThan80Credits() here
	case 'g':		// display the list
		
		if(list->student->getCredits() > 80)
		{
			moreThan80Credits();
		}
		else
		{
			cout << "Student does not have more than 80 credits";
		}
		

	case 'q':		// quit
		break;

	default: cout << c << " is invalid input!\n";
	}

}

// project7 Q1.2 Define isValidInput() to validate rollNo to be in [1,999] and credits to be in [0,90], 
// those numbers included in the range   [10 points]
int isValidInput(int rollNo, int credits)
{
	if (rollNo >= 1 && rollNo <= 999)
		return 1;
	/*
	else
	{
		try
		{
			if (rollNo < 1 || rollNo > 999)
				throw rollNo;
		}
		catch (int exc)
		{
			cout << "Not a valid roll number" << endl;
		}
	}
	*/
	if (credits >= 0 && credits <= 90)
		return 1;
	/*
	else
	{
		try
		{
			if (credits < 0 || credits > 90)
				throw credits;
		}
		catch (int EXC)
		{
			cout << "Not a valid number of credits" << endl;
		}
	}
	*/
	return 0;		// edit if needed
}

// project7
// Q2.2 define totalCredits() here [10 points]
int totalCredits(string name)
{
	Container* tempList = list;
	int t_Credits = 0;
	Student ST;
	
	while(tempList != NULL)
	{
		if(tempList->student->getName() == name)
		{
			ST = *(tempList->student);
			t_Credits = ST + (totalCredits(name));
		}
		tempList = tempList->next;
	}
	return t_Credits;
}

// project7 Q4 define moreThan80Credits() here [20 points]
// The function should use operator= overloaded function of Student class
// Note: Delete the new list after displaying
void moreThan80Credits()
{
	Container* tempList = list;			
	// This assumes that we have at least 1 student in the linked list
	Container* newList = NULL;
	Student& ST_MoreThan80_Cr();
	
	//newList->next = NULL;
	tempList = tempList->next;
	
	while (tempList != NULL)
	{
		if (tempList->student->getCredits() > 80)
		{
			newList = newList->next = new Container();
			newList->student = new Student(*tempList->student);
			cout << "Name:" << newList->student->getName() << endl;
			cout << "Credits:" << newList->student->getCredits() << endl;
			newList->next = NULL;
		}
		tempList = tempList->next;
	}
	delete newList;
}

// modified searchStudent() to always return NULL, so that same names can be added to the list.
Student* searchStudent(string name_input)
{
	return NULL;						// return NULL if student not found in list
}

// This function will not work since we modified searchStudent(). That is ok.
void changeRollNo(Student* student, int rollNo_input)
{
	student->rollNo = rollNo_input;
}

void addStudent(string name_input, int rollNo_input, int credits_input, studentType type)
{
	Container* tempList = list;				// work on a copy of 'list'

	// create new container
	Container* newListMember = new Container();
	// Depending of student type, create new student node
	if (type == undergrad)
		newListMember->student = new Undergrad(name_input, rollNo_input, credits_input, type);
	else
		newListMember->student = new Grad(name_input, rollNo_input, credits_input, type);

	newListMember->next = NULL;

	// if list is empty, then add first student and return
	if (list == NULL)
	{
		list = newListMember;
		return;
	}

	// if list is not empty, then traverse to the end of list and add student
	while (tempList->next != NULL)
	{
		tempList = tempList->next;
	}
	tempList->next = newListMember;
}


void displayList()
{
	Container* tempList = list;			// work on a copy of 'list'

	if (list == NULL)
		cout << endl << "List is empty!" << endl << endl;
	// parse the list and use class member function 'displayInfo()' to display student info
	while (tempList != NULL)
	{
		tempList->student->displayInfo();
		tempList = tempList->next;
	}
}

void removeStudent(string name_input)
{
	Container* studentToRemove;

	// if student is at head of list
	if (list->student->getName() == name_input)
	{
		studentToRemove = list;
		list = list->next;		// move head of list to 2nd node	
		delete studentToRemove->student;
		delete studentToRemove;
		return;
	}

	// parse the list to locate the student
	Container* currentListMember = list->next;
	Container* previousListMember = list;

	while (currentListMember != NULL)
	{
		if (currentListMember->student->getName() == name_input)
		{
			studentToRemove = currentListMember;
			currentListMember = currentListMember->next;	// omit the 'studentToRemove' node because we will delete it next
			previousListMember->next = currentListMember;	// stitch the previous node with node after the 'studentToRemove'
			// Need to remove the Grad/Undergrad object before removing the container object
			delete studentToRemove->student;
			delete studentToRemove;
			return;
		}
		previousListMember = currentListMember;
		currentListMember = currentListMember->next;
	}
}


void deleteList()
{
	while (list != NULL)
	{
		Container* listMember = list;
		list = list->next;
		delete listMember->student;		// delete Grad/Undergrad object
		delete listMember;				// then delete Container object
	}
}

void save(string fileName)
{

	int count = 0;
	Container* tempList = list;

	while (tempList != NULL) // count number of Containers in linked list
	{
		tempList = tempList->next;
		count++;
	}

	ofstream myfile;
	myfile.open(fileName);		// myfile.open(fileName.c_str()); when using g++

	if (myfile.is_open())
	{
		tempList = list;
		myfile << count;		// write number of students saved in file

		// write the list of students to file
		while (tempList != NULL)
		{
			myfile << tempList->student->getName() << endl;
			myfile << tempList->student->getRollNo() << endl;
			myfile << (int)tempList->student->getstudentType() << endl;
			tempList = tempList->next;
		}
		myfile.close();
	}

}

void load(string fileName)
{

	ifstream myfile;
	myfile.open(fileName);			// myfile.open(fileName.c_str()); when using g++

	if (myfile.is_open())			// true if file exists
	{
		int type_int = 0, count = 0;
		string name_read, temp;
		int rollNo_read = 0;
		int credits_read = 0;
		studentType type_read;

		Container* listMember = list;

		myfile >> count;			// read the number of students saved in the file

		for (int i = 0; i < count; i++)
		{
			Container* newListMember = new Container();

			// read a student's info
			std::getline(myfile, name_read);
			std::getline(myfile, temp);
			rollNo_read = stoi(temp);
			std::getline(myfile, temp);
			type_int = stoi(temp);
			type_read = (studentType)type_int;

			// create new student node depending on student type
			if (type_read == undergrad)
				newListMember->student = new Undergrad(name_read, rollNo_read, credits_read, type_read);
			else
				newListMember->student = new Grad(name_read, rollNo_read, credits_read, type_read);

			newListMember->next = NULL;

			// add first student to the list
			if (list == NULL)
			{
				newListMember->next = list;
				list = newListMember;
			}
			// add rest of the students to the tail of the list
			else
			{
				listMember = list;
				while (listMember->next != NULL)
				{
					listMember = listMember->next;
				}
				listMember->next = newListMember;
			}
		}
		myfile.close();
	}

}
